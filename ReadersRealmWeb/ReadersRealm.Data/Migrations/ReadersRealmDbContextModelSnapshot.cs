// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadersRealm.Data;

#nullable disable

namespace ReadersRealm.Data.Migrations
{
    [DbContext(typeof(ReadersRealmDbContext))]
    partial class ReadersRealmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReadersRealm.Data.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Author Identifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasComment("Author Age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasComment("Author Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Author First Name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("Author Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Author Last Name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Author Middle Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Author Phone Number");

                    b.HasKey("Id");

                    b.ToTable("Authors", t =>
                        {
                            t.HasComment("Readers Realm Author");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5e87971-53ad-40df-97ff-79dcaef4520a"),
                            Age = 45,
                            Email = "johnsmith@example.com",
                            FirstName = "John",
                            Gender = 0,
                            LastName = "Smith",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            Id = new Guid("72fc4a67-9b6d-44e0-a21a-cc78ba323dea"),
                            Age = 38,
                            Email = "emilyjohnson@example.com",
                            FirstName = "Emily",
                            Gender = 1,
                            LastName = "Johnson",
                            PhoneNumber = "098-765-4321"
                        });
                });

            modelBuilder.Entity("ReadersRealm.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Book Identifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Author Identifier");

                    b.Property<int?>("BookCover")
                        .HasColumnType("int")
                        .HasComment("Book Cover Type");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Book Description");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("Book's International Standard Book Number");

                    b.Property<int?>("Pages")
                        .HasColumnType("int")
                        .HasComment("Book Page Count");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("Book Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Book Title");

                    b.Property<bool>("Used")
                        .HasColumnType("bit")
                        .HasComment("Book Condition");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books", t =>
                        {
                            t.HasComment("Readers Realm Book");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e74704c4-7d6d-48ff-a101-ef414bc756f8"),
                            AuthorId = new Guid("a5e87971-53ad-40df-97ff-79dcaef4520a"),
                            BookCover = 1,
                            CategoryId = 1,
                            Description = "An exciting journey through uncharted lands.",
                            ISBN = "1234567890123",
                            Pages = 320,
                            Price = 19.99m,
                            Title = "The Great Adventure",
                            Used = false
                        },
                        new
                        {
                            Id = new Guid("17358943-a431-4fcf-810f-b02d16a2da83"),
                            AuthorId = new Guid("72fc4a67-9b6d-44e0-a21a-cc78ba323dea"),
                            BookCover = 0,
                            CategoryId = 2,
                            Description = "Exploring the wonders of science in everyday life.",
                            ISBN = "9876543210987",
                            Pages = 220,
                            Price = 25.99m,
                            Title = "Science and You",
                            Used = true
                        });
                });

            modelBuilder.Entity("ReadersRealm.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasComment("Category Display Order");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category Name");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("Readers Realm Category");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "SciFi"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "History"
                        });
                });

            modelBuilder.Entity("ReadersRealm.Data.Models.Book", b =>
                {
                    b.HasOne("ReadersRealm.Data.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadersRealm.Data.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ReadersRealm.Data.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ReadersRealm.Data.Models.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
